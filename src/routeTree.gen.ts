/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SettingsImport } from './routes/settings'
import { Route as LogsImport } from './routes/logs'
import { Route as LoginCompleteImport } from './routes/login-complete'
import { Route as LoginImport } from './routes/login'
import { Route as IndexImport } from './routes/index'
import { Route as ListingsIndexImport } from './routes/listings/index'
import { Route as ListingsNewImport } from './routes/listings/new'
import { Route as ListingsIdImport } from './routes/listings/$id'

// Create/Update Routes

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const LogsRoute = LogsImport.update({
  id: '/logs',
  path: '/logs',
  getParentRoute: () => rootRoute,
} as any)

const LoginCompleteRoute = LoginCompleteImport.update({
  id: '/login-complete',
  path: '/login-complete',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ListingsIndexRoute = ListingsIndexImport.update({
  id: '/listings/',
  path: '/listings/',
  getParentRoute: () => rootRoute,
} as any)

const ListingsNewRoute = ListingsNewImport.update({
  id: '/listings/new',
  path: '/listings/new',
  getParentRoute: () => rootRoute,
} as any)

const ListingsIdRoute = ListingsIdImport.update({
  id: '/listings/$id',
  path: '/listings/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/login-complete': {
      id: '/login-complete'
      path: '/login-complete'
      fullPath: '/login-complete'
      preLoaderRoute: typeof LoginCompleteImport
      parentRoute: typeof rootRoute
    }
    '/logs': {
      id: '/logs'
      path: '/logs'
      fullPath: '/logs'
      preLoaderRoute: typeof LogsImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/listings/$id': {
      id: '/listings/$id'
      path: '/listings/$id'
      fullPath: '/listings/$id'
      preLoaderRoute: typeof ListingsIdImport
      parentRoute: typeof rootRoute
    }
    '/listings/new': {
      id: '/listings/new'
      path: '/listings/new'
      fullPath: '/listings/new'
      preLoaderRoute: typeof ListingsNewImport
      parentRoute: typeof rootRoute
    }
    '/listings/': {
      id: '/listings/'
      path: '/listings'
      fullPath: '/listings'
      preLoaderRoute: typeof ListingsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/login-complete': typeof LoginCompleteRoute
  '/logs': typeof LogsRoute
  '/settings': typeof SettingsRoute
  '/listings/$id': typeof ListingsIdRoute
  '/listings/new': typeof ListingsNewRoute
  '/listings': typeof ListingsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/login-complete': typeof LoginCompleteRoute
  '/logs': typeof LogsRoute
  '/settings': typeof SettingsRoute
  '/listings/$id': typeof ListingsIdRoute
  '/listings/new': typeof ListingsNewRoute
  '/listings': typeof ListingsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/login-complete': typeof LoginCompleteRoute
  '/logs': typeof LogsRoute
  '/settings': typeof SettingsRoute
  '/listings/$id': typeof ListingsIdRoute
  '/listings/new': typeof ListingsNewRoute
  '/listings/': typeof ListingsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/login-complete'
    | '/logs'
    | '/settings'
    | '/listings/$id'
    | '/listings/new'
    | '/listings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/login-complete'
    | '/logs'
    | '/settings'
    | '/listings/$id'
    | '/listings/new'
    | '/listings'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/login-complete'
    | '/logs'
    | '/settings'
    | '/listings/$id'
    | '/listings/new'
    | '/listings/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  LoginCompleteRoute: typeof LoginCompleteRoute
  LogsRoute: typeof LogsRoute
  SettingsRoute: typeof SettingsRoute
  ListingsIdRoute: typeof ListingsIdRoute
  ListingsNewRoute: typeof ListingsNewRoute
  ListingsIndexRoute: typeof ListingsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  LoginCompleteRoute: LoginCompleteRoute,
  LogsRoute: LogsRoute,
  SettingsRoute: SettingsRoute,
  ListingsIdRoute: ListingsIdRoute,
  ListingsNewRoute: ListingsNewRoute,
  ListingsIndexRoute: ListingsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login",
        "/login-complete",
        "/logs",
        "/settings",
        "/listings/$id",
        "/listings/new",
        "/listings/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/login-complete": {
      "filePath": "login-complete.tsx"
    },
    "/logs": {
      "filePath": "logs.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/listings/$id": {
      "filePath": "listings/$id.tsx"
    },
    "/listings/new": {
      "filePath": "listings/new.tsx"
    },
    "/listings/": {
      "filePath": "listings/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
